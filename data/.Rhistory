cmt2$overall[[1]]
varImp(modelFit2)
pred <- predict(modelFit2,testing)
testing$predright <- pred==testing$classe
table(pred,testing$classe)
pred <- predict(modelFit2,testPc2)
testing$predright <- pred == testing$classe
table(pred,testing$classe)
qplot(yaw_belt,pitch_forearm,color=predright,data=testing)
qplot(yaw_belt,pitch_forearm,magnet_dumbbell_z,color=predright,data=testing)
qplot(yaw_belt,magnet_dumbbell_z,color=predright,data=testing)
qplot(pitch_forearm,magnet_dumbbell_z,color=predright,data=testing)
qplot(pitch_forearm,magnet_dumbbell_z,color=classe,data=testing)
qplot(yaw_belt,pitch_forearm,color=classe,data=testing)
qplot(yaw_belt,magnet_dumbell_z,color=classe,data=testing)
qplot(yaw_belt,magnet_dumbbell_z,color=classe,data=testing)
featurePlot(x = training.filtered[,-lastCol], y=training.filtered$classe)
featurePlot(x = training.filtered[,-lastCol], y=training.filtered$classe)
hist(x = training.filtered[,-lastCol])
preProc3 <- preProcess(training.filtered[,-lastCol],method="boxcox")
preProc3 <- preProcess(training.filtered[,-lastCol],method="BoxCox")
trainPC3 <- predict(preProc3, training.filtered[,-lastCol])
modelFit3 <- train(training.filtered$classe ~., method="rf" ,data=trainPC3)
cm3 <- confusionMatrix(training.filtered$classe,predict(modelFit3,trainPC3))
cmt3$overall
cm3$overall
testPc3 <- predict(preProc3,testing[,-lastCol])
cmt3 <- confusionMatrix(testing$classe,predict(modelFit3,testPc3))
cmt3$overall
qplot(X,classe,data=traininig)
qplot(X,classe,data=training)
View(trainingSet)
qplot(user_name,classe,data=training)
qplot(user_name,classe,data=trainingSet)
qplot(num_window,classe,data=trainingSet)
qplot(cvtd_timestamp,classe,data=trainingSet)
qplot(raw_timestamp_part_1,classe,data=trainingSet)
qplot(yaw_belt,classe,data=trainingSet)
qplot(pitch_belt,classe,data=trainingSet)
View(trainingSet)
View(trainingSet[,-(1:7)])
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
mainProcess()
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
mainProcess()
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
mainProcess()
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
mainProcess()
setwd("~/Coursera/PracticalMachineLearning/Project/")
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
getwd()
list.files()
model.Box <- "model_Box.Rds"
model.Norm <- "model_Norm.Rds"
model.NormPCA <- "model_NormPCA.Rds"
print(model.Box$finalModel)
model.Norm
my_model <- readRDS(model.Box)
my_model$finalModel
my_model$method
my_model$modelInfo
my_model$bestTune
print(my_model$finalModel)
allData <- readInData()
datasets <- createTrainTest(allData)
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
datasets <- createTrainTest(allData)
library(caret)
datasets <- createTrainTest(allData)
training <- datasets$training
training <- training[,colSums(is.na(training)) < nrow(training) * 0.5]
training <- training[,-(1:7)]
descrCor <- cor(training[,-ncol(training)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
training <- training[,-highlyCorDescr]
preProc.Box <- preProcess(training[,-lastCol],method=c("BoxCox"))
lastCol <- ncol(training)
preProc.Box <- preProcess(training[,-lastCol],method=c("BoxCox"))
train.Box <- predict(preProc.Box, training[,-lastCol])
cm.box <- confusionMatrix(training$classe,predict(my_model,train.box))
preProc.NormPCA <- preProcess(training[,-lastCol],method=c("center","scale","pca"), thresh = 0.9)
preProc.Norm <- preProcess(training[,-lastCol],method=c("center","scale"))
my_modelNorm <- readRDS(model.Norm)
getwd()
library(caret)
library(doParallel)
registerDoParallel(cores=2)
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
checkAndDownloadFiles()
# Step 2 - Read in the training data
allData <- readInData()
# Step 3 - create the training & test datasets
datasets <- createTrainTest(allData)
# Step 4 - Process the data by removing poor features
training <- datasets$training
# A. Remove columns that are mostly NA
training <- training[,colSums(is.na(training)) < nrow(training) * 0.5]
# B. Next Remove columsn relating to Index, timestamps and windows
training <- training[,-(1:7)]
# C. Check for highly correlated features and remove unnecessary features
descrCor <- cor(training[,-ncol(training)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
training <- training[,-highlyCorDescr]
preProc.NormPCA <- preProcess(training[,-lastCol],method=c("center","scale","pca"), thresh = 0.9)
preProc.Norm <- preProcess(training[,-lastCol],method=c("center","scale"))
lastCol <- ncol(training)
preProc.NormPCA <- preProcess(training[,-lastCol],method=c("center","scale","pca"), thresh = 0.9)
preProc.Norm <- preProcess(training[,-lastCol],method=c("center","scale"))
preProc.Box <- preProcess(training[,-lastCol],method=c("BoxCox"))
# Fit the models
train.NormPCA <- predict(preProc.NormPCA, training[,-lastCol])
train.Norm <- predict(preProc.Norm, training[,-lastCol])
train.Box <- predict(preProc.Box, training[,-lastCol])
list.files()
my_file.Box <- "model_Box.Rds"
my_file.Norm <- "model_Norm.Rds"
my_file.NormPCA <- "model_NormPCA.Rds"
my_model.Box <- readRDS(my_model.Box)
my_model.Box <- readRDS(my_file.Box)
my_model.Box$dots
my_model.Box$preProcess
my_model.Box$times
cm.Box <- confusionMatrix(training$classe,predict(my_mode.Box,train.Box))
cm.Box <- confusionMatrix(training$classe,predict(my_model.Box,train.Box))
cm.Box$overall
varImp(my_model.Box)
my_model.Norm <- readRDS(my_model.Norm)
my_model.Norm <- readRDS(my_file.Norm)
remove (my_model.Box)
cm.Norm <- confusionMatrix(training$classe,predict(my_model.Norm,train.Norm))
varImp(my_model.Norm)
cm.Norm$overall
remove(my_model.Norm)
trainCapAveS <- predict(my_model.Norm,train.Norm)$capitalAve
my_model.Norm <- readRDS(my_model.Norm)
my_model.Norm <- readRDS(my_file.Norm)
trainCapAveS <- predict(my_model.Norm,train.Norm)$capitalAve
pred.Norm <- predict(my_model.Norm,train.Norm)
pred.Norm
datasets <- createTrainTest(allData)
testing <- datasets$testing
testing <- testing[,colSums(is.na(testing)) < nrow(testing) * 0.5]
testing <- testing[,-(1:7)]
testing <- testing[,highlyCorDescr]
test.Norm <- predict(preProc.Norm,testing[,-lastCol])
View(testing)
View(training)
testing <- datasets$testing
testing <- testing[,colSums(is.na(testing)) < nrow(testing) * 0.5]
testing <- testing[,-(1:7)]
testing <- testing[,-highlyCorDescr]
test.Norm <- predict(preProc.Norm,testing[,-lastCol])
cm.Norm.test <- confusionMatrix(testing$classe,predict(my_model.Norm,test.Norm))
cm.Norm.test$overall
cm.Norm.test$table
norm.rf.pr = predict(my_model.Norm,type="prob",test.Norm)[,2]
norm.rf.pred = prediction(my_model.Norm, test.Norm)
norm.rf.pred = prediction(my_model.Norm, test.Norm)
library(pracma)
library(signal)
turtle80 <- read.csv("~/turtle80.csv")
View(turtle80)
internal(turtle80[,(1:5)])
internal <- turtle80[,(1:5)]
external <- turtle80[,(6:10)]
library(caret)
descrCor <- cor(internal)
intCor <- cor(internal)
extCor <- cor(external)
highlyCorInt <- findCorrelation(intCor,cutoff = .75)
highlyCorEnt <- findCorrelation(extCor,cutoff = .75)
highlyCorEnt
highlyCorInt
nzvInt <- nearZeroVar(x = intCor)
nzvExt <- nearZeroVar(x = extCor)
nzvInt
nzvExt <- nearZeroVar(x = extCor, saveMetrics = TRUE)
nzvInt <- nearZeroVar(x = intCor, saveMetrics = TRUE)
nzvInt$nzv
nzvInt
nzvExt
plot.ts(external$Ext.BN)
plot.ts(external$Ext.DN)
plot.ts(external$Ext.FN)
plot.ts(external$Ext.FH)
plot.ts(external$Ext.FS)
plot.ts(external$Ext.TM)
plot.ts(internal$Int.MH)
plot.ts(internal$Int.MS)
plot.ts(internal$Int.WT)
plot.ts(internal$Int.AG)
plot.ts(internal$Int.MH.1)
x.Ext.BN <- external$Ext.BN
lastValVec = vector(mode="numeric", length=100)
for(i in 1:length(lastValVec)){
lastValVec[i] <- x.Ext.BN[length(x.Ext.BN)];
}
extendX.Ext.Bn = c(x.Ext.BN,lastValVec)
bf <- butter(4, 1/30, type="low")
fX.Ext.Bn <- filtfilt(bf,extendX.Ext.Bn)
fX.Ext.Bn <- fx.Ext.Bn[1:length(x.Ext.BN)]
fX.Ext.Bn <- fX.Ext.Bn[1:length(x.Ext.BN)]
plot.ts(fX.Ext.Bn)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
plot.ts(converted$Int.MH)
plot.ts(converted$Int.MS)
plot.ts(converted$Int.WT)
plot.ts(converted$Int.AG)
plot.ts(converted$Int.MH.1)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
plot.ts(converted$Int.MH)
plot.ts(converted$Int.MS)
plot.ts(converted$Int.WT)
plot.ts(converted$Int.AG)
plot.ts(converted$Int.MH.1)
plot.ts(converted$Ext.BN)
plot.ts(converted$Ext.MS)
plot.ts(converted$Ext.DN)
plot.ts(converted$Ext.FH)
plot.ts(converted$Ext.FS)
plot.ts(converted$Ext.TM)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
plot.ts(converted$Int.MH)
plot.ts(converted$Int.MS)
plot.ts(converted$Int.WT)
plot.ts(converted$Int.AG)
plot.ts(converted$Int.MH.1)
plot.ts(converted$Ext.BN)
plot.ts(converted$Ext.DN)
plot.ts(converted$Ext.FH)
plot.ts(converted$Ext.FS)
plot.ts(converted$Ext.TM)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
source('~/.active-rstudio-document')
getwd()
setwd("~/")
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
dev.off()
source('~/.active-rstudio-document')
doPlots(converted)
doPlots(turtle80)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
intConv <- converted[,1:5]
extConv <- converted[,6:10]
nzvInt <- nearZeroVar(x = intConv)
nzvExt <- nearZeroVar(x = extConv)
nzvInt <- nearZeroVar(x = intConv, saveMetrics = TRUE)
nzvExt <- nearZeroVar(x = extConv, saveMetrics = TRUE)
nzvInt
View(intConv)
intConvCor < cor(intConv)
intConvCor <- cor(intConv)
highCorIntConv <- findCorrelation(intConvCor, cutoff = 0.5)
ighCorIntConv
highCorIntConv
highCorIntConv <- findCorrelation(intConvCor, cutoff = 0.75)
highCorIntConv
highCorIntConv <- findCorrelation(intConvCor, cutoff = 0.9)
highCorIntConv
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(converted)
converted <- convertDF(turtle80)
doPlots(converted)
source('~/.active-rstudio-document')
doPlots(turtle80)
source('~/.active-rstudio-document')
converted <- convertDF(turtle80)
intConv <- converted[,1:5]
intConvCor <- cor(intConv)
highCorIntConv <- findCorrelation(intConvCor, cutoff = 0.5)
nzvInt <- nearZeroVar(x = intConv, saveMetrics = TRUE)
nzvInt
converted2 <- convertDF(converted)
source('~/.active-rstudio-document')
doPlots(converted2)
View(converted)
View(converted2)
var(converted)
extConv <- converted[,6:10]
extConvCor <- cor(extConv)
highCorExtConv <- findCorrelation(extConvCor, cutoff = 0.5)
highCorExtConv
highCorExtConv <- findCorrelation(extConvCor, cutoff = 0.75)
highCorExtConv
highCorExtConv <- findCorrelation(extConvCor, cutoff = 0.8)
highCorExtConv
highCorExtConv <- findCorrelation(extConvCor, cutoff = 0.8)
sd(converted[,1])
sd(converted[,2])
sd(converted[,3])
sd(converted[,4])
sd(converted[,5])
sd(converted[,6])
sd(converted[,7])
sd(converted[,8])
sd(converted[,9])
sd(converted[,10])
sd(turtle80[,1])
sd(turtle80[,2])
sd(turtle80[,3])
sd(turtle80[,5])
sd(turtle80[,6])
sd(turtle80[,7])
sd(turtle80[,8])
sd(turtle80[,9])
sd(turtle80[,10])
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
doPlots(convertedShort)
source('~/.active-rstudio-document')
convertedShort <- convertDF(turtle80)
setwd("~/Coursera/PracticalMachineLearning/Project/")
list.files()
my_file.Norm <- "model_Norm.Rds"
my_model <- readRDS(my_model_file)
my_model <- readRDS(my_file.Norm)
testtoPredict <- read.table(file = "data/pml-testing.csv", sep=",", skip=0, header=TRUE,
na.strings=c("NA","NaN",""," ","#DIV/0!"))
View(testtoPredict)
testtoPredict <- testtoPredict[,colSums(is.na(testtoPredict)) < nrow(testtoPredict) * 0.5]
allData <- readInData()
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
allData <- readInData()
training <- datasets$training
datasets <- createTrainTest(allData)
training <- datasets$training
training <- training[,colSums(is.na(training)) < nrow(training) * 0.5]
training <- training[,-(1:7)]
descrCor <- cor(training[,-ncol(training)])
highlyCorDescr <- findCorrelation(descrCor, cutoff = .75)
training <- training[,-highlyCorDescr]
lastCol <- ncol(training)
testtoPredict <- testtoPredict[,-(1:7)]
testtoPredict <- testtoPredict[,highlyCorDescr]
preProc.Norm <- preProcess(training[,-lastCol],method=c("center","scale"))
testtoPredict <- read.table(file = "data/pml-testing.csv", sep=",", skip=0, header=TRUE,
+                             na.strings=c("NA","NaN",""," ","#DIV/0!"))
testtoPredict <- read.table(file = "data/pml-testing.csv", sep=",", skip=0, header=TRUE,
na.strings=c("NA","NaN",""," ","#DIV/0!"))
testtoPredict <- testtoPredict[,names(training)]
testtoPredict <- testtoPredict[,names(training[,-35])]
View(testtoPredict)
testPc <- predict(preProc.Norm,testtoPredict)
preds <- predict(my_model,testPc)
preds
setwd("data/")
source('~/Coursera/PracticalMachineLearning/Project/processing.R')
pml_write_files(preds)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
training = segmentationOriginal[Case="Train",]
training = segmentationOriginal[segm_distance$Case="Train",]
training = segmentationOriginal[segm_distance$Case=="Train",]
training = segmentationOriginal[segmentationOriginal$Case=="Train",]
testing = segmentationOriginal[segmentationOriginal$Case=="Test",]
View(training)
View(testing)
set.seed(125)
modFit <- train(Class ~., method="rpart", data=training[,-2])
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
all.columns <- mapply(function(x) NA, names(training), USE.NAMES = T)
make.obs <- function(repl){
# replace NAs in all.columns with data from repl and return as data.frame
data.frame(t(replace(all.columns, names(repl), repl)))
}
newdata.example <- make.obs(c(TotalIntenStatusCh3 = 3, FiberWidthCh1 = 20, VarIntenCh4 = 100))
predict(modFit,newdata = newdata.example)
newdata.example <- make.obs(c(TotalIntenStatusCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modFit,newdata = newdata.example)
newdata.example <- make.obs(c(TotalIntenStatusCh2 = 50000, FiberWidthCh1 = 10, VarIntenCh4=100))
predict(modFit,newdata = newdata.example)
newdata.example <- make.obs(c(TotalIntenStatusCh2 = 57000, FiberWidthCh1 = 8, VarIntenCh4=100))
predict(modFit,newdata = newdata.example)
newdata.example <- make.obs(c(FiberWidthCh1 = 8, VarIntenCh4=100, PerimStatusCh1=2))
predict(modFit,newdata = newdata.example)
modFit
p <- predict(modFit,newdata = newdata.example)
p
training <- training[,-2]
testing <- testing[,-2]
View(training)
View(testing)
set.seed(125)
modFit <- train(Class ~., method="rpart", data=training)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
pdf("ClassTree.pdf")
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
dev.off
dev.off()
getwd()
pdf("ClassTree.pdf")
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE,cex=.8)
dev.off()
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE,cex=.8)
pdf("ClassTree.pdf")
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
dev.off()
pdf("ClassTree.pdf", width = 10, height = 20)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE,cex=.8)
dev.off()
install.packages("rattle")
library(rattle)
install.packages("rattle")
